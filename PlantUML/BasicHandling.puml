@startuml Brighter SendAsync Pipeline

actor WebUser
boundary WebController
control CommandProcessor
control MyCommand
control "UseInBoxHandlerAsync<MyCommandHandler>" as Inbox
control "RequestLoggingAsync<MyCommandHandler>" as Logger
entity InMemoryRequestContextFactory
entity RequestContext
entity PipelineBuilder
entity Interpreter
control LifetimeScope
control SubscriberRegistry
boundary HandlerFactory
collections PreAttributesMemento
collections PreAttributes
collections "AsyncPipelines<T>" as HandlerChain
control MyCommandHandlerAsync
control IAmAnInbox

WebUser -> WebController: HTTP POST
activate WebController
WebController -> MyCommand: new() MyCommand
activate MyCommand
WebController -> CommandProcessor: SendAsync<MyCommand>(command)
activate CommandProcessor
activate IAmAnInbox
CommandProcessor -> InMemoryRequestContextFactory: Create()
activate InMemoryRequestContextFactory
InMemoryRequestContextFactory -> RequestContext: new() RequestContext
activate RequestContext
CommandProcessor -> PipelineBuilder: new() PipelineBuilder<MyCommand>
activate PipelineBuilder
PipelineBuilder -> LifetimeScope: new() LifeTimeScope
activate LifetimeScope
PipelineBuilder -> Interpreter: new() Interpreter<MyCommand>
Interpreter -> PipelineBuilder: return interpeter
activate Interpreter
CommandProcessor -> PipelineBuilder: Build()
PipelineBuilder -> Interpreter: GetHandlers()
Interpreter -> SubscriberRegistry: Get(command)
activate SubscriberRegistry
Interpreter -> HandlerFactory: Create()
activate HandlerFactory
activate MyCommandHandlerAsync
HandlerFactory -> PipelineBuilder: return handler
PipelineBuilder -> PipelineBuilder: BuildPipeline()

activate PreAttributesMemento
alt Memento Has PreAttributes
    PipelineBuilder -> PreAttributesMemento: TryGetValue(handlerName)
    PreAttributesMemento -> PipelineBuilder: return preAttributes
else No PreAttributes Stored
    PipelineBuilder -> MyCommandHandlerAsync: FindHandlerMethod
    PipelineBuilder -> MyCommandHandlerAsync: GetOtherHandlersInPipeline()
    PipelineBuilder <- MyCommandHandlerAsync: return attributes
    PipelineBuilder -> PipelineBuilder: AddGlobalInboxAttributesAsync()
    PipelineBuilder -> PipelineBuilder: HasNoInboxAttributesInPipeline()
    PipelineBuilder -> PipelineBuilder: HasExistingUseInboxAttributesInPipeline()
    PipelineBuilder -> PreAttributes: new()
    PipelineBuilder -> PreAttributesMemento: TryAdd(preAttributes)
    PreAttributesMemento -> PipelineBuilder: return preAttributes
end

activate PreAttributes
PipelineBuilder -> PipelineBuilder: PushOntoAsyncPipeline()
PipelineBuilder -> HandlerFactory: CreateAsyncRequestHandler()
HandlerFactory -> PipelineBuilder: return handler
activate Inbox
PipelineBuilder -> Inbox: SetSuccessor()
PipelineBuilder -> HandlerFactory: CreateAsyncRequestHandler()
HandlerFactory -> PipelineBuilder: return handler
activate Logger
PipelineBuilder -> Logger: SetSuccessor()
PipelineBuilder -> LifetimeScope: Add()
deactivate PreAttributes
deactivate PreAttributesMemento
deactivate Interpreter

activate HandlerChain
PipelineBuilder -> CommandProcessor: return handlerChain
CommandProcessor -> CommandProcessor: AssertValidSendPipeline()
CommandProcessor -> HandlerChain: First()

CommandProcessor -> Inbox: HandleAsync()
Inbox ->  IAmAnInbox: ExistsAsync()
Inbox -> Inbox: base.HandleAsync()
Inbox -> Logger: HandlerAsync()
Logger -> Logger: LogCommand()
Logger->Logger: base.HandleAsync()
Logger->MyCommandHandlerAsync: HandleAsync()
MyCommandHandlerAsync->Logger: return
Logger -> Inbox: return
Inbox -> IAmAnInbox: AddAsync()
Inbox -> CommandProcessor: return
CommandProcessor -> PipelineBuilder: Dispose()
PipelineBuilder -> LifetimeScope: Dispose()
LifetimeScope -> HandlerFactory: Release()
HandlerFactory -> PipelineBuilder: return
PipelineBuilder -> CommandProcessor: return
CommandProcessor -> WebController: return
deactivate Inbox
deactivate HandlerChain
deactivate MyCommandHandlerAsync
deactivate Logger
deactivate LifetimeScope
deactivate PipelineBuilder
deactivate RequestContext
deactivate MyCommand
deactivate WebController
 

@enduml




 





